#include <stdio.h>
#include <stdlib.h>
#include <iostream>
 
 using namespace std;

struct Interval{
	int head,tail;
	int label;
	Interval(int h,int t,int l){
		head=h;
		tail=t;
		label=l;
	}
	Interval(int h,int t){
		head=h;
		tail=t;
		label=0;
	}
};

struct Point{
	int pos;
	int tag; //tag>0 start point <0 end point
	point(int p,int t){
		pos=p;
		tag=t;
	}
}

bool cmp(const Point& a,const Point& b){
	return a.pos<b.pos || (a.pos==b.pos && a.tag>b.tag) );
}

vector<Interval> intersect(vector<vector<Interval> > intervals){
	vector<Interval> ret;
	vector<Point> points;
	for(int i=0;i<intervals.size();i++){
		for(int j=0;j<intervals[i].size();j++){
			points.push_back(Point(intervals[i][j].head,i+1));
			points.push_back(Point(intervals[i][j].tail,-i-1));
		}
	}
	sort(points.begin(),points.end,cmp);
	int count[intervals.size()+1];
	int pre=points[0].pos;
	int prec=1;
	int size=intervals.size();
	for(int i=1;i<points.size();i++){
		if(points[i].tag>0){
			if(count[points[i].tag]==0){
				prec++;	
			}
			count[points[i].tag]++;
			pre=points[i].pos;
		}else{
			if(prec==size){
				ret.push_back(Interval(pre,points[i].pos));
				prec--;
			}
			count[points[i].tag]--;
			if(count[points[i].tag==0)
				prec--;
		}
	}
}

void print(vector<Interval> p){
	for(int i=0;i<p.size();i++)
		cout<<p.head<<" "<<p.tail<<endl;
}

int main(){
	Interval i1(1,2);
	Interval i2(3,5);
	Interval i3(4,8);
	vector<Interval> ia;
	vector<Interval> ia.push_back(i1);
	vector<Interval> ia.push_back(i2);
	vector<Interval> ia.push_back(i3);
		vector<Interval> ib;
	vector<Interval> ib.push_back(i1);
	vector<Interval> ib.push_back(i2);
	vector<Interval> ib.push_back(i3);
	vector<vector<Interval> > data;
	data.push_back(ia);
	data.push_back(ib);
	vector<Interval> ret=intersect(data);
	print(ret);

}
