
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Point{
	int x;
	int y;
	Point(int i,int j){
		x=i;
		y=j;
	}
};
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};

void shuffle(int* arr){
	for(int i=3;i>-1;i--){
		int j=rand()%(i+1);
		swap(arr[i],arr[j]);
	}
}
//x y is new position
void carve(bool** upper,bool** left,int x,int y,int d){
	if(d==0){ //move down
		upper[x][y]=false;
	}else if(d==1){ //move up
		upper[x][y+1]=false;
	}else if(d==2){ //move to right
		left[x][y]= false;
	}else if(d==3) //move left
		left[x+1][y]=false;
}


void generate(bool** upper,bool** left,Point p,bool** visited,int m,int n){
	visited[p.x][p.y]=true;
	int arr[]={0,1,2,3};
	shuffle(arr);
	for(int i=0;i<4;i++){
		int d=arr[i];
		int x=p.x+dx[d];
		int y=p.y+dy[d];
		if(x>=0 && x<m && y>=0 && y<n && !visited[x][y]){
            if(x==0)
                cout<<"dir: "<<d<<endl;
			carve(upper,left,x,y,d);
            Point pp(x,y);
			generate(upper,left,pp,visited,m,n);
		}
	}
}
void init(bool** &arr,int m,int n,bool val){
    arr=new bool*[m];
	for(int i=0;i<m;i++){
        arr[i]=new bool[n];
		for(int j=0;j<n;j++)
			arr[i][j]=val;
    }
}

void print(bool* upper[20],bool** left,int m,int n){
    // j is row i is column
    for(int j=0;j<n;j++){
        for(int i=0;i<m;i++) {
			if(left[i][j])
				cout<<"|";
            else
                cout<<' ';
			if(upper[i][j]){
				cout<<"-";
			}else
                cout<<" ";
		}
		cout<<"|"<<endl;
	}
    for(int i=0;i<m;i++)
        cout<<"--";
}
int main(){
	int m=20;
	int n=20;
	Point start(2,2);
	bool** upper; //has wall
	bool** left;
	bool** visited;
	init(upper,m,n,true);
	init(left,m,n,true);
	init(visited,m,n,false);
	generate(upper,left,start,visited,m,n);
	print(upper,left,m,n);
}

