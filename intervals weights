#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Interval{
    int start;
    int end;
	int val;
    Interval(int s,int e,int v){
        start=s;
        end=e;
        val=v;
    }
    Interval(){}
};
struct Point{
	int pos;
	int weight; //weight less than 0 means end point
	Point(int p,int w){
		pos=p;
		weight=w;
	}
    Point(){}
};

bool cmp(Point p1,Point p2){
	return p1.pos<p2.pos || (p1.pos==p2.pos && p1.weight<p2.weight);
}
void discrete(vector<Interval> intervals,vector<int> & ranges,vector<int> &weights){
	vector<Point> vec;
	for(int i=0;i<intervals.size();i++){
		Point p1(intervals[i].start,intervals[i].val);
		Point p2(intervals[i].end,-intervals[i].val);
		vec.push_back(p1);
		vec.push_back(p2);
	}
	sort(vec.begin(),vec.end(),cmp);
	Point prev;
	prev=vec[0];
	ranges.push_back(prev.pos);
	for(int i=1;i<vec.size();i++){
		Point cur=vec[i];
		if(cur.pos==prev.pos){
			prev.weight=max(prev.weight,cur.weight);
			continue;
		}
		
		if(prev.weight>0&&cur.weight>0){
            if(prev.weight>=cur.weight)
                continue;
            else{
                ranges.push_back(cur.pos);
                weights.push_back(prev.weight);
                prev=cur;
            }
		}
		else if(prev.weight>0&&cur.weight<0){
            if(abs(cur.weight)<=prev.weight && i!=vec.size()-1){
                continue;
            }else{
                ranges.push_back(cur.pos);
                weights.push_back(abs(cur.weight));
                prev.pos=cur.pos;
            }
		}else if(prev.weight<0&&cur.weight>0){
            ranges.push_back(cur.pos);
			weights.push_back(0);
			prev=cur;
		}else{
                ranges.push_back(cur.pos);
                weights.push_back(abs(cur.weight));
                prev=cur;
            
		}
	}
}
void print(vector<int> v){
    for(int i=0;i<v.size();i++)
        cout<<v[i]<<" ";
    cout<<endl;
}
int main(){
    Interval i1(1,2,1);
    Interval i2(1,4,2);
    Interval i3(2,5,3);
    Interval i4(3,6,4);
    vector<int> ranges;
    vector<int> weights;
    vector<Interval> intervals;
    intervals.push_back(i1);
    intervals.push_back(i2);
    intervals.push_back(i3);
       intervals.push_back(i4);
    discrete(intervals,ranges,weights);
    print(ranges);
    print(weights);
}
